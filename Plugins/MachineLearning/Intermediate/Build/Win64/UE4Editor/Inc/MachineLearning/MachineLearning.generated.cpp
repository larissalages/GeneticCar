// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/MachineLearningPrivatePCH.h"
#include "MachineLearning.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1MachineLearning() {}
	void UMachineLearningBPLibrary::StaticRegisterNativesUMachineLearningBPLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMachineLearningBPLibrary::StaticClass(), "MachineLearningSampleFunction",(Native)&UMachineLearningBPLibrary::execMachineLearningSampleFunction);
	}
	IMPLEMENT_CLASS(UMachineLearningBPLibrary, 2551432199);
static class UEnum* ETransferType_StaticEnum()
{
	extern MACHINELEARNING_API class UPackage* Z_Construct_UPackage__Script_MachineLearning();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern MACHINELEARNING_API class UEnum* Z_Construct_UEnum_MachineLearning_ETransferType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_MachineLearning_ETransferType, Z_Construct_UPackage__Script_MachineLearning(), TEXT("ETransferType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETransferType(ETransferType_StaticEnum, TEXT("/Script/MachineLearning"), TEXT("ETransferType"), false, nullptr, nullptr);
	void UNeuron::StaticRegisterNativesUNeuron()
	{
		FNativeFunctionRegistrar::RegisterFunction(UNeuron::StaticClass(), "CalculateHiddenGradients",(Native)&UNeuron::execCalculateHiddenGradients);
		FNativeFunctionRegistrar::RegisterFunction(UNeuron::StaticClass(), "CalculateOutputGradients",(Native)&UNeuron::execCalculateOutputGradients);
		FNativeFunctionRegistrar::RegisterFunction(UNeuron::StaticClass(), "FeedForward",(Native)&UNeuron::execFeedForward);
		FNativeFunctionRegistrar::RegisterFunction(UNeuron::StaticClass(), "GetOutput",(Native)&UNeuron::execGetOutput);
		FNativeFunctionRegistrar::RegisterFunction(UNeuron::StaticClass(), "GetWeight",(Native)&UNeuron::execGetWeight);
		FNativeFunctionRegistrar::RegisterFunction(UNeuron::StaticClass(), "SetOutput",(Native)&UNeuron::execSetOutput);
		FNativeFunctionRegistrar::RegisterFunction(UNeuron::StaticClass(), "Setup",(Native)&UNeuron::execSetup);
		FNativeFunctionRegistrar::RegisterFunction(UNeuron::StaticClass(), "SetWeight",(Native)&UNeuron::execSetWeight);
		FNativeFunctionRegistrar::RegisterFunction(UNeuron::StaticClass(), "UpdateInputWeights",(Native)&UNeuron::execUpdateInputWeights);
	}
	IMPLEMENT_CLASS(UNeuron, 960636168);
	void ANeuralNet::StaticRegisterNativesANeuralNet()
	{
		FNativeFunctionRegistrar::RegisterFunction(ANeuralNet::StaticClass(), "BackwardPropagationOfErrors",(Native)&ANeuralNet::execBackwardPropagationOfErrors);
		FNativeFunctionRegistrar::RegisterFunction(ANeuralNet::StaticClass(), "ForwardPropagation",(Native)&ANeuralNet::execForwardPropagation);
		FNativeFunctionRegistrar::RegisterFunction(ANeuralNet::StaticClass(), "getLayerSize",(Native)&ANeuralNet::execgetLayerSize);
		FNativeFunctionRegistrar::RegisterFunction(ANeuralNet::StaticClass(), "GetNeuron",(Native)&ANeuralNet::execGetNeuron);
		FNativeFunctionRegistrar::RegisterFunction(ANeuralNet::StaticClass(), "getNumLayers",(Native)&ANeuralNet::execgetNumLayers);
		FNativeFunctionRegistrar::RegisterFunction(ANeuralNet::StaticClass(), "GetRecentAverageError",(Native)&ANeuralNet::execGetRecentAverageError);
		FNativeFunctionRegistrar::RegisterFunction(ANeuralNet::StaticClass(), "GetResults",(Native)&ANeuralNet::execGetResults);
		FNativeFunctionRegistrar::RegisterFunction(ANeuralNet::StaticClass(), "Setup",(Native)&ANeuralNet::execSetup);
	}
	IMPLEMENT_CLASS(ANeuralNet, 2749063950);
	void ANeuralAIController::StaticRegisterNativesANeuralAIController()
	{
		FNativeFunctionRegistrar::RegisterFunction(ANeuralAIController::StaticClass(), "LineTrace",(Native)&ANeuralAIController::execLineTrace);
		FNativeFunctionRegistrar::RegisterFunction(ANeuralAIController::StaticClass(), "Simulate",(Native)&ANeuralAIController::execSimulate);
	}
	IMPLEMENT_CLASS(ANeuralAIController, 926173313);
	void ANeuralRender::StaticRegisterNativesANeuralRender()
	{
	}
	IMPLEMENT_CLASS(ANeuralRender, 831687078);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	AIMODULE_API class UClass* Z_Construct_UClass_AAIController();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AStaticMeshActor();

	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_UMachineLearningBPLibrary_MachineLearningSampleFunction();
	MACHINELEARNING_API class UClass* Z_Construct_UClass_UMachineLearningBPLibrary_NoRegister();
	MACHINELEARNING_API class UClass* Z_Construct_UClass_UMachineLearningBPLibrary();
	MACHINELEARNING_API class UEnum* Z_Construct_UEnum_MachineLearning_ETransferType();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_UNeuron_CalculateHiddenGradients();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_UNeuron_CalculateOutputGradients();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_UNeuron_FeedForward();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_UNeuron_GetOutput();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_UNeuron_GetWeight();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_UNeuron_SetOutput();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_UNeuron_Setup();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_UNeuron_SetWeight();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_UNeuron_UpdateInputWeights();
	MACHINELEARNING_API class UClass* Z_Construct_UClass_UNeuron_NoRegister();
	MACHINELEARNING_API class UClass* Z_Construct_UClass_UNeuron();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_ANeuralNet_BackwardPropagationOfErrors();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_ANeuralNet_ForwardPropagation();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_ANeuralNet_getLayerSize();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_ANeuralNet_GetNeuron();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_ANeuralNet_getNumLayers();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_ANeuralNet_GetRecentAverageError();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_ANeuralNet_GetResults();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_ANeuralNet_Setup();
	MACHINELEARNING_API class UClass* Z_Construct_UClass_ANeuralNet_NoRegister();
	MACHINELEARNING_API class UClass* Z_Construct_UClass_ANeuralNet();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_ANeuralAIController_LineTrace();
	MACHINELEARNING_API class UFunction* Z_Construct_UFunction_ANeuralAIController_Simulate();
	MACHINELEARNING_API class UClass* Z_Construct_UClass_ANeuralAIController_NoRegister();
	MACHINELEARNING_API class UClass* Z_Construct_UClass_ANeuralAIController();
	MACHINELEARNING_API class UClass* Z_Construct_UClass_ANeuralRender_NoRegister();
	MACHINELEARNING_API class UClass* Z_Construct_UClass_ANeuralRender();
	MACHINELEARNING_API class UPackage* Z_Construct_UPackage__Script_MachineLearning();
	UFunction* Z_Construct_UFunction_UMachineLearningBPLibrary_MachineLearningSampleFunction()
	{
		struct MachineLearningBPLibrary_eventMachineLearningSampleFunction_Parms
		{
			float Param;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMachineLearningBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MachineLearningSampleFunction"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(MachineLearningBPLibrary_eventMachineLearningSampleFunction_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, MachineLearningBPLibrary_eventMachineLearningSampleFunction_Parms), 0x0010000000000580);
			UProperty* NewProp_Param = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Param"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Param, MachineLearningBPLibrary_eventMachineLearningSampleFunction_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MachineLearningTesting"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Execute Sample function"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("MachineLearning sample test testing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/MachineLearningBPLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMachineLearningBPLibrary_NoRegister()
	{
		return UMachineLearningBPLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UMachineLearningBPLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_MachineLearning();
			OuterClass = UMachineLearningBPLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMachineLearningBPLibrary_MachineLearningSampleFunction());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UMachineLearningBPLibrary_MachineLearningSampleFunction(), "MachineLearningSampleFunction"); // 2146097220
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("MachineLearningBPLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/MachineLearningBPLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("*      Function library class.\n*      Each function in it is expected to be static and represents blueprint node that can be called in any blueprint.\n*\n*      When declaring function you can define metadata for the node. Key function specifiers will be BlueprintPure and BlueprintCallable.\n*      BlueprintPure - means the function does not affect the owning object in any way and thus creates a node without Exec pins.\n*      BlueprintCallable - makes a function which can be executed in Blueprints - Thus it has Exec pins.\n*      DisplayName - full name of the node, shown when you mouse over the node and in the blueprint drop down menu.\n*                              Its lets you name the node using characters not allowed in C++ function names.\n*      CompactNodeTitle - the word(s) that appear on the node.\n*      Keywords -      the list of keywords that helps you to find node when you search for it using Blueprint drop-down menu.\n*                              Good example is \"Print String\" node which you can find also by using keyword \"log\".\n*      Category -      the category your node will be under in the Blueprint drop-down menu.\n*\n*      For more info on custom blueprint nodes visit documentation:\n*      https://wiki.unrealengine.com/Custom_Blueprint_Node_Creation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMachineLearningBPLibrary(Z_Construct_UClass_UMachineLearningBPLibrary, &UMachineLearningBPLibrary::StaticClass, TEXT("UMachineLearningBPLibrary"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMachineLearningBPLibrary);
	UEnum* Z_Construct_UEnum_MachineLearning_ETransferType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_MachineLearning();
		extern uint32 Get_Z_Construct_UEnum_MachineLearning_ETransferType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETransferType"), 0, Get_Z_Construct_UEnum_MachineLearning_ETransferType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETransferType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETransferType::TT_Ramp")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETransferType::TT_Gaussian")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETransferType::TT_Tanh")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETransferType::TT_Logistic")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETransferType::TT_SoftPlus")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETransferType::TT_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ETransferType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TT_Gaussian.DisplayName"), TEXT("Gaussian"));
			MetaData->SetValue(ReturnEnum, TEXT("TT_Logistic.DisplayName"), TEXT("Logistic"));
			MetaData->SetValue(ReturnEnum, TEXT("TT_Ramp.DisplayName"), TEXT("Ramp"));
			MetaData->SetValue(ReturnEnum, TEXT("TT_SoftPlus.DisplayName"), TEXT("SoftPlus"));
			MetaData->SetValue(ReturnEnum, TEXT("TT_Tanh.DisplayName"), TEXT("Tanh"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_MachineLearning_ETransferType_CRC() { return 4169068383U; }
	UFunction* Z_Construct_UFunction_UNeuron_CalculateHiddenGradients()
	{
		struct Neuron_eventCalculateHiddenGradients_Parms
		{
			TArray<UNeuron*> NextLayer;
		};
		UObject* Outer=Z_Construct_UClass_UNeuron();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CalculateHiddenGradients"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(Neuron_eventCalculateHiddenGradients_Parms));
			UProperty* NewProp_NextLayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NextLayer"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(NextLayer, Neuron_eventCalculateHiddenGradients_Parms), 0x0010000008000182);
			UProperty* NewProp_NextLayer_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NextLayer, TEXT("NextLayer"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UNeuron_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
			MetaData->SetValue(NewProp_NextLayer, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNeuron_CalculateOutputGradients()
	{
		struct Neuron_eventCalculateOutputGradients_Parms
		{
			float IncomingValue;
		};
		UObject* Outer=Z_Construct_UClass_UNeuron();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CalculateOutputGradients"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Neuron_eventCalculateOutputGradients_Parms));
			UProperty* NewProp_IncomingValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(IncomingValue, Neuron_eventCalculateOutputGradients_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNeuron_FeedForward()
	{
		struct Neuron_eventFeedForward_Parms
		{
			TArray<UNeuron*> PreviousLayer;
		};
		UObject* Outer=Z_Construct_UClass_UNeuron();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FeedForward"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(Neuron_eventFeedForward_Parms));
			UProperty* NewProp_PreviousLayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreviousLayer"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PreviousLayer, Neuron_eventFeedForward_Parms), 0x0010000008000182);
			UProperty* NewProp_PreviousLayer_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PreviousLayer, TEXT("PreviousLayer"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UNeuron_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
			MetaData->SetValue(NewProp_PreviousLayer, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNeuron_GetOutput()
	{
		struct Neuron_eventGetOutput_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNeuron();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOutput"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Neuron_eventGetOutput_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, Neuron_eventGetOutput_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNeuron_GetWeight()
	{
		struct Neuron_eventGetWeight_Parms
		{
			int32 index;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UNeuron();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Neuron_eventGetWeight_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, Neuron_eventGetWeight_Parms), 0x0010000000000580);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(index, Neuron_eventGetWeight_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNeuron_SetOutput()
	{
		struct Neuron_eventSetOutput_Parms
		{
			float IncomingValue;
		};
		UObject* Outer=Z_Construct_UClass_UNeuron();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOutput"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Neuron_eventSetOutput_Parms));
			UProperty* NewProp_IncomingValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(IncomingValue, Neuron_eventSetOutput_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNeuron_Setup()
	{
		struct Neuron_eventSetup_Parms
		{
			int32 NumberOfOutputs;
			int32 IncomingIndex;
			TEnumAsByte<ETransferType> IncomingTransferType;
			float IncomingNetRate;
			float IncomingNetMomentum;
		};
		UObject* Outer=Z_Construct_UClass_UNeuron();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Setup"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Neuron_eventSetup_Parms));
			UProperty* NewProp_IncomingNetMomentum = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingNetMomentum"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(IncomingNetMomentum, Neuron_eventSetup_Parms), 0x0010000000000080);
			UProperty* NewProp_IncomingNetRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingNetRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(IncomingNetRate, Neuron_eventSetup_Parms), 0x0010000000000080);
			UProperty* NewProp_IncomingTransferType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingTransferType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(IncomingTransferType, Neuron_eventSetup_Parms), 0x0010000000000080, Z_Construct_UEnum_MachineLearning_ETransferType());
			UProperty* NewProp_IncomingIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(IncomingIndex, Neuron_eventSetup_Parms), 0x0010000000000080);
			UProperty* NewProp_NumberOfOutputs = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumberOfOutputs"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumberOfOutputs, Neuron_eventSetup_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNeuron_SetWeight()
	{
		struct Neuron_eventSetWeight_Parms
		{
			int32 index;
			float newWeight;
		};
		UObject* Outer=Z_Construct_UClass_UNeuron();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Neuron_eventSetWeight_Parms));
			UProperty* NewProp_newWeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("newWeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(newWeight, Neuron_eventSetWeight_Parms), 0x0010000000000080);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(index, Neuron_eventSetWeight_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Added by Eduardo Sim?es"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UNeuron_UpdateInputWeights()
	{
		struct Neuron_eventUpdateInputWeights_Parms
		{
			TArray<UNeuron*> PreviousLayer;
		};
		UObject* Outer=Z_Construct_UClass_UNeuron();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UpdateInputWeights"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(Neuron_eventUpdateInputWeights_Parms));
			UProperty* NewProp_PreviousLayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PreviousLayer"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PreviousLayer, Neuron_eventUpdateInputWeights_Parms), 0x0010000000000180);
			UProperty* NewProp_PreviousLayer_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PreviousLayer, TEXT("PreviousLayer"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UNeuron_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UNeuron_NoRegister()
	{
		return UNeuron::StaticClass();
	}
	UClass* Z_Construct_UClass_UNeuron()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_MachineLearning();
			OuterClass = UNeuron::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UNeuron_CalculateHiddenGradients());
				OuterClass->LinkChild(Z_Construct_UFunction_UNeuron_CalculateOutputGradients());
				OuterClass->LinkChild(Z_Construct_UFunction_UNeuron_FeedForward());
				OuterClass->LinkChild(Z_Construct_UFunction_UNeuron_GetOutput());
				OuterClass->LinkChild(Z_Construct_UFunction_UNeuron_GetWeight());
				OuterClass->LinkChild(Z_Construct_UFunction_UNeuron_SetOutput());
				OuterClass->LinkChild(Z_Construct_UFunction_UNeuron_Setup());
				OuterClass->LinkChild(Z_Construct_UFunction_UNeuron_SetWeight());
				OuterClass->LinkChild(Z_Construct_UFunction_UNeuron_UpdateInputWeights());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NeuronMomentum = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NeuronMomentum"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NeuronMomentum, UNeuron), 0x0010000000000005);
				UProperty* NewProp_NeuronTrainingRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NeuronTrainingRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NeuronTrainingRate, UNeuron), 0x0010000000000005);
				UProperty* NewProp_NeuronTransferType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NeuronTransferType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NeuronTransferType, UNeuron), 0x0010000000000005, Z_Construct_UEnum_MachineLearning_ETransferType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNeuron_CalculateHiddenGradients(), "CalculateHiddenGradients"); // 588672563
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNeuron_CalculateOutputGradients(), "CalculateOutputGradients"); // 1375939923
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNeuron_FeedForward(), "FeedForward"); // 1163586626
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNeuron_GetOutput(), "GetOutput"); // 1260019610
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNeuron_GetWeight(), "GetWeight"); // 2233447303
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNeuron_SetOutput(), "SetOutput"); // 3672455361
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNeuron_Setup(), "Setup"); // 371989416
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNeuron_SetWeight(), "SetWeight"); // 1214240095
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UNeuron_UpdateInputWeights(), "UpdateInputWeights"); // 2637300557
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Neuron.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_NeuronMomentum, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_NeuronMomentum, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
				MetaData->SetValue(NewProp_NeuronTrainingRate, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_NeuronTrainingRate, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
				MetaData->SetValue(NewProp_NeuronTransferType, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_NeuronTransferType, TEXT("ModuleRelativePath"), TEXT("Public/Neuron.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNeuron(Z_Construct_UClass_UNeuron, &UNeuron::StaticClass, TEXT("UNeuron"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNeuron);
	UFunction* Z_Construct_UFunction_ANeuralNet_BackwardPropagationOfErrors()
	{
		struct NeuralNet_eventBackwardPropagationOfErrors_Parms
		{
			TArray<float> InputFloatArray;
		};
		UObject* Outer=Z_Construct_UClass_ANeuralNet();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BackwardPropagationOfErrors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(NeuralNet_eventBackwardPropagationOfErrors_Parms));
			UProperty* NewProp_InputFloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InputFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(InputFloatArray, NeuralNet_eventBackwardPropagationOfErrors_Parms), 0x0010000008000182);
			UProperty* NewProp_InputFloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputFloatArray, TEXT("InputFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
			MetaData->SetValue(NewProp_InputFloatArray, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANeuralNet_ForwardPropagation()
	{
		struct NeuralNet_eventForwardPropagation_Parms
		{
			TArray<float> InputFloatArray;
		};
		UObject* Outer=Z_Construct_UClass_ANeuralNet();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ForwardPropagation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(NeuralNet_eventForwardPropagation_Parms));
			UProperty* NewProp_InputFloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InputFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(InputFloatArray, NeuralNet_eventForwardPropagation_Parms), 0x0010000008000182);
			UProperty* NewProp_InputFloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InputFloatArray, TEXT("InputFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
			MetaData->SetValue(NewProp_InputFloatArray, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANeuralNet_getLayerSize()
	{
		struct NeuralNet_eventgetLayerSize_Parms
		{
			int32 layer;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ANeuralNet();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getLayerSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NeuralNet_eventgetLayerSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, NeuralNet_eventgetLayerSize_Parms), 0x0010000000000580);
			UProperty* NewProp_layer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("layer"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(layer, NeuralNet_eventgetLayerSize_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANeuralNet_GetNeuron()
	{
		struct NeuralNet_eventGetNeuron_Parms
		{
			int32 layer;
			int32 index;
			UNeuron* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ANeuralNet();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNeuron"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(NeuralNet_eventGetNeuron_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, NeuralNet_eventGetNeuron_Parms), 0x0010000000000580, Z_Construct_UClass_UNeuron_NoRegister());
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(index, NeuralNet_eventGetNeuron_Parms), 0x0010000000000080);
			UProperty* NewProp_layer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("layer"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(layer, NeuralNet_eventGetNeuron_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANeuralNet_getNumLayers()
	{
		struct NeuralNet_eventgetNumLayers_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ANeuralNet();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getNumLayers"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NeuralNet_eventgetNumLayers_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, NeuralNet_eventgetNumLayers_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Added by Eduardo Sim?es"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANeuralNet_GetRecentAverageError()
	{
		struct NeuralNet_eventGetRecentAverageError_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ANeuralNet();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRecentAverageError"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(NeuralNet_eventGetRecentAverageError_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, NeuralNet_eventGetRecentAverageError_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANeuralNet_GetResults()
	{
		struct NeuralNet_eventGetResults_Parms
		{
			TArray<float> ResultFloatArray;
		};
		UObject* Outer=Z_Construct_UClass_ANeuralNet();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetResults"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54420401, 65535, sizeof(NeuralNet_eventGetResults_Parms));
			UProperty* NewProp_ResultFloatArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ResultFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ResultFloatArray, NeuralNet_eventGetResults_Parms), 0x0010000000000180);
			UProperty* NewProp_ResultFloatArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ResultFloatArray, TEXT("ResultFloatArray"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANeuralNet_Setup()
	{
		struct NeuralNet_eventSetup_Parms
		{
			TArray<int32> NeurologicalMap;
			TEnumAsByte<ETransferType> IncomingTransferType;
			float IncomingTrainingRate;
			float IncomingMomentum;
		};
		UObject* Outer=Z_Construct_UClass_ANeuralNet();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Setup"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(NeuralNet_eventSetup_Parms));
			UProperty* NewProp_IncomingMomentum = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingMomentum"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(IncomingMomentum, NeuralNet_eventSetup_Parms), 0x0010000000000080);
			UProperty* NewProp_IncomingTrainingRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingTrainingRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(IncomingTrainingRate, NeuralNet_eventSetup_Parms), 0x0010000000000080);
			UProperty* NewProp_IncomingTransferType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingTransferType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(IncomingTransferType, NeuralNet_eventSetup_Parms), 0x0010000000000080, Z_Construct_UEnum_MachineLearning_ETransferType());
			UProperty* NewProp_NeurologicalMap = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NeurologicalMap"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(NeurologicalMap, NeuralNet_eventSetup_Parms), 0x0010000008000182);
			UProperty* NewProp_NeurologicalMap_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NeurologicalMap, TEXT("NeurologicalMap"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
			MetaData->SetValue(NewProp_NeurologicalMap, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ANeuralNet_NoRegister()
	{
		return ANeuralNet::StaticClass();
	}
	UClass* Z_Construct_UClass_ANeuralNet()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_MachineLearning();
			OuterClass = ANeuralNet::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;

				OuterClass->LinkChild(Z_Construct_UFunction_ANeuralNet_BackwardPropagationOfErrors());
				OuterClass->LinkChild(Z_Construct_UFunction_ANeuralNet_ForwardPropagation());
				OuterClass->LinkChild(Z_Construct_UFunction_ANeuralNet_getLayerSize());
				OuterClass->LinkChild(Z_Construct_UFunction_ANeuralNet_GetNeuron());
				OuterClass->LinkChild(Z_Construct_UFunction_ANeuralNet_getNumLayers());
				OuterClass->LinkChild(Z_Construct_UFunction_ANeuralNet_GetRecentAverageError());
				OuterClass->LinkChild(Z_Construct_UFunction_ANeuralNet_GetResults());
				OuterClass->LinkChild(Z_Construct_UFunction_ANeuralNet_Setup());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NetMomentum = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetMomentum"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NetMomentum, ANeuralNet), 0x0011000000000005);
				UProperty* NewProp_NetTrainingRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetTrainingRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NetTrainingRate, ANeuralNet), 0x0011000000000005);
				UProperty* NewProp_RecentAverageSmoothingFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RecentAverageSmoothingFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RecentAverageSmoothingFactor, ANeuralNet), 0x0011000000000005);
				UProperty* NewProp_TransferType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TransferType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TransferType, ANeuralNet), 0x0011000000000005, Z_Construct_UEnum_MachineLearning_ETransferType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ANeuralNet_BackwardPropagationOfErrors(), "BackwardPropagationOfErrors"); // 2384563396
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ANeuralNet_ForwardPropagation(), "ForwardPropagation"); // 3326705738
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ANeuralNet_getLayerSize(), "getLayerSize"); // 3166209265
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ANeuralNet_GetNeuron(), "GetNeuron"); // 817478517
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ANeuralNet_getNumLayers(), "getNumLayers"); // 658466503
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ANeuralNet_GetRecentAverageError(), "GetRecentAverageError"); // 2893872060
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ANeuralNet_GetResults(), "GetResults"); // 644293524
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ANeuralNet_Setup(), "Setup"); // 2087512079
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("NeuralNet.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_NetMomentum, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_NetMomentum, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_NetMomentum, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
				MetaData->SetValue(NewProp_NetTrainingRate, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_NetTrainingRate, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_NetTrainingRate, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
				MetaData->SetValue(NewProp_RecentAverageSmoothingFactor, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_RecentAverageSmoothingFactor, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_RecentAverageSmoothingFactor, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
				MetaData->SetValue(NewProp_TransferType, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_TransferType, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_TransferType, TEXT("ModuleRelativePath"), TEXT("Public/NeuralNet.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ANeuralNet(Z_Construct_UClass_ANeuralNet, &ANeuralNet::StaticClass, TEXT("ANeuralNet"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ANeuralNet);
	UFunction* Z_Construct_UFunction_ANeuralAIController_LineTrace()
	{
		struct NeuralAIController_eventLineTrace_Parms
		{
			float IncomingSightDistance;
			float IncomingAngle;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ANeuralAIController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LineTrace"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(NeuralAIController_eventLineTrace_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, NeuralAIController_eventLineTrace_Parms), 0x0010000000000580);
			UProperty* NewProp_IncomingAngle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(IncomingAngle, NeuralAIController_eventLineTrace_Parms), 0x0010000000000080);
			UProperty* NewProp_IncomingSightDistance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingSightDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(IncomingSightDistance, NeuralAIController_eventLineTrace_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/NeuralAIController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ANeuralAIController_Simulate()
	{
		struct NeuralAIController_eventSimulate_Parms
		{
			bool IncomingIsLearning;
		};
		UObject* Outer=Z_Construct_UClass_ANeuralAIController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Simulate"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(NeuralAIController_eventSimulate_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IncomingIsLearning, NeuralAIController_eventSimulate_Parms, bool);
			UProperty* NewProp_IncomingIsLearning = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IncomingIsLearning"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IncomingIsLearning, NeuralAIController_eventSimulate_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(IncomingIsLearning, NeuralAIController_eventSimulate_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("NeuralNetwork"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/NeuralAIController.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ANeuralAIController_NoRegister()
	{
		return ANeuralAIController::StaticClass();
	}
	UClass* Z_Construct_UClass_ANeuralAIController()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AAIController();
			Z_Construct_UPackage__Script_MachineLearning();
			OuterClass = ANeuralAIController::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800280;

				OuterClass->LinkChild(Z_Construct_UFunction_ANeuralAIController_LineTrace());
				OuterClass->LinkChild(Z_Construct_UFunction_ANeuralAIController_Simulate());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Network = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Network"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Network, ANeuralAIController), 0x0011000000000005, Z_Construct_UClass_ANeuralNet_NoRegister());
				UProperty* NewProp_NetToSpawn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetToSpawn"), RF_Public|RF_Transient|RF_MarkAsNative) UClassProperty(CPP_PROPERTY_BASE(NetToSpawn, ANeuralAIController), 0x0011000000000005, Z_Construct_UClass_UObject_NoRegister(), UClass::StaticClass());
				UProperty* NewProp_SightDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SightDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SightDistance, ANeuralAIController), 0x0011000000000005);
				UProperty* NewProp_SightAngle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SightAngle"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SightAngle, ANeuralAIController), 0x0011000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ANeuralAIController_LineTrace(), "LineTrace"); // 227532114
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ANeuralAIController_Simulate(), "Simulate"); // 879329554
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("NeuralAIController.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/NeuralAIController.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_Network, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_Network, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_Network, TEXT("ModuleRelativePath"), TEXT("Public/NeuralAIController.h"));
				MetaData->SetValue(NewProp_NetToSpawn, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_NetToSpawn, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_NetToSpawn, TEXT("ModuleRelativePath"), TEXT("Public/NeuralAIController.h"));
				MetaData->SetValue(NewProp_SightDistance, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_SightDistance, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_SightDistance, TEXT("ModuleRelativePath"), TEXT("Public/NeuralAIController.h"));
				MetaData->SetValue(NewProp_SightAngle, TEXT("Category"), TEXT("NeuralNetwork"));
				MetaData->SetValue(NewProp_SightAngle, TEXT("ExposeOnSpawn"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_SightAngle, TEXT("ModuleRelativePath"), TEXT("Public/NeuralAIController.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ANeuralAIController(Z_Construct_UClass_ANeuralAIController, &ANeuralAIController::StaticClass, TEXT("ANeuralAIController"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ANeuralAIController);
	UClass* Z_Construct_UClass_ANeuralRender_NoRegister()
	{
		return ANeuralRender::StaticClass();
	}
	UClass* Z_Construct_UClass_ANeuralRender()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AStaticMeshActor();
			Z_Construct_UPackage__Script_MachineLearning();
			OuterClass = ANeuralRender::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("NeuralRender.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/NeuralRender.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ANeuralRender(Z_Construct_UClass_ANeuralRender, &ANeuralRender::StaticClass, TEXT("ANeuralRender"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ANeuralRender);
	UPackage* Z_Construct_UPackage__Script_MachineLearning()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/MachineLearning")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x71822D3B;
			Guid.B = 0x5F108EDD;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
